* Env file
#+BEGIN_SRC emacs-lisp
  ;; env file should have the format
  ;; (setenv "SECRET_KEY" "secret-val")
  ;; (require 'env)
  (load "~/.emacs.d/env.el")
#+END_SRC
* Terminal
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<s-return>") 'eshell)
  (global-set-key (kbd "<s-M-return>") 'ansi-term)

  (use-package exec-path-from-shell
    :ensure t
    )

  ;; (defun my-shell-kill-pending-command ()
  ;;   (interactive)
  ;;   (eshell-bol)
  ;;   (kill-line)
  ;;   (evil-insert 1))

  (defun my-shell-completion ()
    (setq pcomplete-ignore-case t))

  (defun my-evil-shell ()
    (evil-define-key 'insert eshell-mode-map
      (kbd "C-p") 'eshell-previous-matching-input-from-input
      (kbd "C-n") 'eshell-nexlst-matching-input-from-input))

  ;; (add-hook 'eshell-mode-hook 'my-evil-shell)
  (add-hook 'eshell-mode-hook 'my-shell-completion)

  (add-hook 'eshell-mode-hook
            (lambda ()

              (my-evil-shell)
              (my-shell-completion)

              (setq eshell-prompt-function
                    (lambda nil
                      (concat
                       (eshell/pwd)
                       "\n")))))

  (defun move-point-to-writeable-last-line ()
    "Move the point to a non-read-only part of the last line.
        If point is not on the last line, move point to the maximum position
        in the buffer.  Otherwise if the point is in read-only text, move the
        point forward out of the read-only sections."
    (interactive)
    (let* ((curline (line-number-at-pos))
           (endline (line-number-at-pos (point-max))))
      (if (= curline endline)
          (if (not (eobp))
              (let (
                    ;; Get text-properties at the current location
                    (plist (text-properties-at (point)))
                    ;; Record next change in text-properties
                    (next-change
                     (or (next-property-change (point) (current-buffer))
                         (point-max))))
                ;; If current text is read-only, go to where that property changes
                (if (plist-get plist 'read-only)
                    (goto-char next-change))))
        (goto-char (point-max)))))

  (defun move-point-on-insert-to-writeable-last-line ()
    "Only edit the current command in insert mode."
    (add-hook 'evil-insert-state-entry-hook
              'move-point-to-writeable-last-line
              nil
              t))

  (add-hook 'eshell-mode-hook
            'move-point-on-insert-to-writeable-last-line)

  ;; (defun my-terminal-insert ()
  ;;   (interactive)
  ;;   (evil-goto-line)
  ;;   (evil-append-line))

  ;; (add-hook 'eshell-mode-hook #'(lambda () (message "hi")))

#+END_SRC

* Org
** Org Updated
#+BEGIN_SRC emacs-lisp
 (use-package org
   :ensure org-plus-contrib ;; <- here is the workaround
   :init
   (setq org-src-tab-acts-natively t))
#+END_SRC
** Org Src
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
  (setq org-src-fontify-natively t)
  (setq org-startup-indented t)
#+END_SRC
** Org Bullets
#+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

** Org Snippets
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
  
** Org Capture
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c")
                  'org-capture)

  (setq org-capture-templates
        '(("c" "Calendar" entry (file  "~/org/gcal.org" )
           "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
          ("l" "Link" entry (file+headline "~/org/links.org" "Links")
           "* %? %^L %^g \n%T" :prepend t)
          ("e" "Emacs Todo" entry (file+headline "~/org/todo.org" "Emacs")
           "* TODO %?\n%u" :prepend t)
          ("t" "Todo" entry (file+headline "~/org/todo.org" "Other")
           "* TODO %?\n%u" :prepend t)))
#+END_SRC
** Org Calendar
#+BEGIN_SRC emacs-lisp
  (setq package-check-signature nil)

  (use-package org-gcal
    :ensure t
    :config
    (setq org-gcal-client-id (getenv "GCAL_ID")
          org-gcal-client-secret (getenv "GCAL_SECRET")
          org-gcal-file-alist '(("dscottgrayson@gmail.com" .  "~/org/gcal.org"))))

  (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
  (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))

   (setq org-agenda-files (list "~/org/gcal.org"))

   (global-set-key "\C-ca" 'org-agenda)

   (general-define-key :keymaps 'org-mode-map
                       "C-c x" 'org-gcal-delete-at-point)

   (use-package calfw
     :ensure t
     :config
     (require 'calfw-org))

#+END_SRC
  
* Email
#+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/place/to/your/mu4e")
    (require 'smtpmail)

                                            ; smtp
    ;; I have my "default" parameters from Gmail
    (setq mu4e-sent-folder "/Users/Scott/Mail/sent"
          ;; mu4e-sent-messages-behavior 'delete ;; Unsure how this should be configured
          mu4e-drafts-folder "/Users/Scott/Mail/drafts"
          user-mail-address "dscottgrayson@gmail.com"
          smtpmail-smtp-user "dscottgrayson"
          smtpmail-local-domain "gmail.com"
          smtpmail-default-smtp-server "smtp.gmail.com"
          smtpmail-smtp-server "smtp.gmail.com"
          smtpmail-smtp-service 587)

                                            ; add the source shipped with mu to load-path
    (add-to-list 'load-path (expand-file-name "/usr/local/Cellar/mu/1.0/share/emacs/site-lisp/mu/mu4e"))

                                            ; make sure emacs finds applications in /usr/local/bin
    (setq exec-path (cons "/usr/local/bin" exec-path))

                                            ; require mu4e
    (require 'mu4e)

    (setq mu4e-maildir "/Users/Scott/Mail")
    (setq mu4e-get-mail-command "/usr/local/bin/mbsync -a")

  ;; html rendering
(require 'mu4e-contrib)
(setq mu4e-html2text-command 'mu4e-shr2text)
(add-hook 'mu4e-view-mode-hook
          (lambda()
            ;; try to emulate some of the eww key-bindings
            (local-set-key (kbd "<tab>") 'shr-next-link)
            (local-set-key (kbd "<backtab>") 'shr-previous-link)))

    (setq mu4e-update-interval 120)
    (setq mu4e-headers-auto-update t)
    (setq mu4e-compose-signature-auto-include nil)

    (setq mu4e-view-show-images t)
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))

                                            ; taken from mu4e page to define bookmarks
    (add-to-list 'mu4e-bookmarks
                 '("size:5M..500M"       "Big messages"     ?b))

                                            ; mu4e requires to specify drafts, sent, and trash dirs
                                            ; a smarter configuration allows to select directories according to the account (see mu4e page)
    (setq mu4e-drafts-folder "/gmail/drafts")
    (setq mu4e-sent-folder "/gmail/sent")
    (setq mu4e-trash-folder "/gmail/trash")

    (bind-key "C-c m" 'mu4e)
#+END_SRC
  
* Vim
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration nil)
    '(evil-search-module (quote evil-search))

    :config
    (use-package evil-surround
      :ensure t
      :config
      (global-evil-surround-mode))

    (use-package evil-indent-textobject
      :ensure t)

    (evil-mode 1))

  (use-package evil-mu4e
    :after evil
    :ensure t
    )

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  (use-package general
    :ensure t
    :init

    (general-define-key
     :keymaps 'visual
     "#" 'evilnc-comment-or-uncomment-lines)

    (general-define-key
     :keymaps 'evil-window-map
     "q" 'evil-window-delete
     "s" 'evil-window-vsplit
     "S" 'evil-window-split
     "c" 'ace-swap-window
     "x" 'evil-window-delete
     "n" 'evil-window-next
     "u" 'winner-undo
     "r" 'winner-redo
     "a" 'balance-windows
     "SPC" 'ace-window)

    (defun evil-nohl ()
      (interactive)
      (evil-ex-nohighlight))

    (general-define-key
     :keymaps 'insert
     "DEL" 'hungry-delete-backward
     )

    (general-define-key
     :keymaps 'normal
     "RET" 'evil-nohl
     "SPC" nil
     "," 'evil-repeat-find-char-reverse
     "(" 'git-gutter:previous-hunk
     ")" 'git-gutter:next-hunk
     "[" 'flycheck-previous-error
     "]" 'flycheck-next-error
     "#" 'evilnc-comment-or-uncomment-lines
     "s" 'avy-goto-word-1
     "S" 'avy-goto-char)

    (setq my-leader1 "SPC")
    (general-define-key
     :prefix my-leader1
     :keymaps 'normal
     "b"  'ivy-switch-buffer
     "f"  'counsel-projectile-find-file
     "F"  'counsel-file-jump
     "." 'ivy-resume
     "r"  'replace-regexp
     "w"  'save-buffer
     "p" 'switch-to-previous-buffer
     "t"  'ac-php-find-symbol-at-point
     "("  'ac-php-location-stack-back
     ")"  'ac-php-location-stack-forward
     "["  'dumb-jump-back
     "]"  'dumb-jump-go
     "i"  'indent-buffer
     "s"  'counsel-projectile-rg))

  (evil-define-minor-mode-key 'normal 'org-src-mode
    (kbd "SPC w") 'nil)

#+END_SRC

* Git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init
    (progn
      (bind-key "C-c g" 'magit-status)
      ))

  (use-package evil-magit
    :after magit
    :ensure t
    )

  (use-package magithub
    :after magit
    :ensure t
    :config (magithub-feature-autoinject t))

  (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode +1))
#+END_SRC

* Hydra
#+BEGIN_SRC emacs-lisp
    (use-package hydra
      :ensure t
      )

    (use-package ivy-hydra
      :ensure t
      )
#+END_SRC

* Filtering
Filtering for searches, commands, history, etc
** Ivy/Counsel/Swiper
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    )

  (use-package swiper
    :ensure t
    :config
    (ivy-mode 1)
    ;; (setq enable-recursive-minibuffers t)
    (setq ivy-re-builders-alist
          '((t . ivy--regex-ignore-order)))
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "M-y") 'counsel-yank-pop)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "C-c p") 'counsel-yank-pop)
    )

  (setq ivy-extra-directories nil)

  (defun eh-ivy-open-current-typed-path ()
    (interactive)
    (when ivy--directory
      (let* ((dir ivy--directory)
             (text-typed ivy-text)
             (path (concat dir text-typed)))
        (delete-minibuffer-contents)
        (ivy--done path))))

  (define-key ivy-minibuffer-map (kbd "<return>") 'ivy-alt-done)
  (define-key ivy-minibuffer-map (kbd "C-f") 'eh-ivy-open-current-typed-path)

  (use-package ivy-rich
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer 'ivy-rich-switch-buffer-transformer))
#+END_SRC

* Project Management
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy)
    (global-set-key (kbd "C-c f") 'projectile-find-file)

    (defun projectile-term ()
      "Create an ansi-term at the project root"
      (interactive)
      (let ((root (projectile-project-root))
            (buff-name (concat " [term] " (projectile-project-root))))
        (if (get-buffer buff-name)
            (switch-to-buffer-other-window buff-name)
          (progn
            (split-window-sensibly (selected-window))
            (other-window 1)
            (setq default-directory root)
            (eshell (getenv "SHELL"))
            (rename-buffer buff-name t)))))

    (global-set-key (kbd "C-x M-t") 'projectile-term))

  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode))
#+END_SRC

* Dumb Jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :config
    ;; shorcuts in vim section
    (setq dumb-jump-selector 'ivy)
    (setq dumb-jump-force-searcher 'rg)
    (setq dumb-jump-rg-cmd "rg -u")
    )
#+END_SRC
* Commenting
#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :ensure t
    )
#+END_SRC
* Emmet
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
      )
#+END_SRC

* Linting
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode)
    (flycheck-add-mode 'javascript-eslint 'web-mode)

    ;; use local eslint from node_modules before global
    ;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
    (defun my/use-eslint-from-node-modules ()
      (let* ((root (locate-dominating-file
                    (or (buffer-file-name) default-directory)
                    "node_modules"))
             (eslint (and root
                          (expand-file-name "node_modules/eslint/bin/eslint.js"
                                            root))))
        (when (and eslint (file-executable-p eslint))
          (setq-local flycheck-javascript-eslint-executable eslint))))
    (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
    )
#+END_SRC

* Snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
      (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t
    :config
      )
#+END_SRC

* Autocomplete
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-dabbrev-downcase 0)
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 2)
    :init
    (add-hook 'after-init-hook 'global-company-mode))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-f") #'company-complete-common)
    (define-key company-active-map (kbd "RET") #'company-complete-selection)
    (define-key company-active-map (kbd "C-u") #'company-previous-page)
    (define-key company-active-map (kbd "C-d") #'company-next-page)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous))

  ;; chunkwm does not like this popup
  ;; (use-package pos-tip
  ;;   :ensure t
  ;;   )

  ;; (use-package company-quickhelp
  ;;   :ensure t
  ;;   :init
  ;;   (company-quickhelp-mode))
#+END_SRC

* Themes
** Theme list
  #+BEGIN_SRC emacs-lisp
    ;; (use-package solarized-theme
    ;;   :ensure t
    ;;   )

    ;; (use-package leuven-theme
    ;;   :ensure t
    ;;   :config
    ;;   (custom-theme-set-faces
    ;;    'leuven
    ;;    `(default ((t (:foreground "#333333" :background "#FFFFE0"))))
    ;;    `(fringe ((t (:background "#FFFFE0"))))
    ;;    `(lazy-highlight ((t (:foreground "#333333" :underline "#FF9632" :background "#FFFF00")))) ; isearch others
    ;;    ))

    ;; (use-package base16-theme
    ;;   :ensure t
    ;;   )

    (use-package kaolin-themes
      :ensure t
      :config
      ;; (load-theme 'kaolin-dark t)
      ;; (setq kaolin-hl-line-colored t)
      ;; (custom-theme-set-faces
       ;; 'kaolin-dark
       ;; '(region           ((t (:background "dark grey"))))
       ;; '(lazy-highlight           ((t (:foreground "black" :background "dark grey"))))
       )

    (use-package plan9-theme
      :ensure t
      :config
      (load-theme 'plan9 t)
      )
  #+END_SRC
** Theme Switcher
#+BEGIN_SRC emacs-lisp
  (defun sb/disable-all-themes ()
    (interactive)
    (mapc #'disable-theme custom-enabled-themes))

  (defun sb/load-theme (theme)
    "Enhance `load-theme' by first disabling enabled themes."
    (sb/disable-all-themes)
    (load-theme theme t))

  (setq sb/hydra-selectors
        "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ")

  (defun sb/sort-themes (themes)
    (sort themes
          (lambda (a b)
            (string<
             (symbol-name a)
             (symbol-name b)))))

  (defun sb/hydra-load-theme-heads (themes)
    (mapcar* (lambda (a b)
               (list (char-to-string a)
                     `(sb/load-theme ',b)
                     (symbol-name b)))
             sb/hydra-selectors themes))

  (bind-keys ("C-c w t" .
              (lambda ()
                (interactive)
                (call-interactively
                 (eval `(defhydra sb/hydra-select-themes
                          (:hint nil :color pink)
                          "Select Theme"
                          ,@(sb/hydra-load-theme-heads
                             (sb/sort-themes
                              (custom-available-themes)))
                          ("DEL" (sb/disable-all-themes))
                          ("RET" nil "done" :color blue)))))))
#+END_SRC
* Modeline
** Spaceline
  #+BEGIN_SRC emacs-lisp
    (use-package spaceline
      :ensure t
      :config
      (require 'spaceline-config)
      (setq powerline-default-separator (quote bar))
      (spaceline-highlight-face-evil-state)
      (spaceline-toggle-minor-modes-off)
      (spaceline-spacemacs-theme))
  #+END_SRC
** Diminish
#+BEGIN_SRC emacs-lisp
    (use-package diminish
      :ensure t
      :init
      (diminish 'beacon-mode)
      (diminish 'company-mode)
      (diminish 'undo-tree-mode)
      (diminish 'which-key-mode)
      (diminish 'rainbow-mode)
      (diminish 'rainbow-delimiters-mode)
      (diminish 'linum-relative-mode)
      (diminish 'git-gutter-mode)
      (diminish 'yas-mode)
      (diminish 'arev-mode)
      (diminish 'ivy-mode))
#+END_SRC

* Windows
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'winner-mode)
    (winner-mode 1))

  (setq split-height-threshold nil)
  (setq split-width-threshold 100)
  (use-package ace-window
    :ensure t
    :config
    ;; (setq aw-keys '(?a ?r ?s ?t ?n ?e ?i ?o))
    (global-set-key (kbd "M-w") 'ace-window))
#+END_SRC

* Other Packages
#+BEGIN_SRC emacs-lisp
    ;; (use-package dashboard
    ;;   :ensure t
    ;;   :config
    ;;   (dashboard-setup-startup-hook)
    ;;   (setq dashboard-items '((recents . 10)
    ;;                           (projects . 5))))

    (use-package whitespace-cleanup-mode
      :ensure t
      :config
      (global-whitespace-cleanup-mode)
      )

    (use-package hungry-delete
      :ensure t
      )

    (use-package indent-guide
      :ensure t
      :config
      (indent-guide-global-mode)
      )

    (use-package rainbow-delimiters
      :ensure t
      :config
      ;; (require 'cl-lib)

      (defvar my-paren-dual-colors
        '("hot pink" "dodger blue"))

      (cl-loop
       for index from 1 to rainbow-delimiters-max-face-count
       do
       (set-face-foreground
        (intern (format "rainbow-delimiters-depth-%d-face" index))
        (elt my-paren-dual-colors
             (if (cl-evenp index) 0 1))))

      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

    ;; (use-package sudo-edit
    ;;   :ensure t
    ;;   )

    (use-package smartparens
      :ensure t
      :config
      (add-hook 'prog-mode-hook #'smartparens-mode)
      (bind-keys
       :map smartparens-mode-map
       ("C-(" . sp-forward-barf-sexp)
       ("C-)" . sp-forward-slurp-sexp)))

    (use-package which-key
      :ensure t
      :init
      (which-key-mode))

    (use-package groovy-mode
      :ensure t
      )

    (use-package rainbow-mode
      :ensure t
      :init
      (rainbow-mode 1))

    ;; (use-package linum-relative
    ;;   :ensure t
    ;;   :config
    ;;   (setq linum-relative-current-symbol "")
    ;;   (linum-relative-mode))

    (use-package beacon
      :ensure t
      :init
      (beacon-mode 1))
#+END_SRC

* Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :config
    (setq avy-keys '(
                    ?t ?n ?s ?e ?r ?i ?o ?a ?p ?l ?f ?u ?c ?, ?v ?d ?h ?y ?w ?. ?x ?' ?; ?q ?j ?g ?/ 
                    ))
    :bind
    ("M-s" . avy-goto-word-1))
#+END_SRC

* Custom Keymaps
  #+BEGIN_SRC emacs-lisp
;;
  #+END_SRC

* Custom Functions
#+BEGIN_SRC emacs-lisp
  (defun my-hello-world ()
    (interactive)
    (message "hello world"))

  (defun switch-to-previous-buffer ()
    "Switch to previously open buffer.
    Repeated invocations toggle between the two most recently open buffers."
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))

  (defun indent-buffer ()
    "Indent the currently visited buffer."
    (interactive)
    (indent-region (point-min) (point-max)))

  (defun todo-visit ()
    (interactive)
    (find-file "~/org/todo.org"))
  (global-set-key (kbd "C-c t") 'todo-visit)

  (defun config-visit ()
    (interactive)
    (find-file "~/Code/dotfiles/emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)

  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

* Languages
#+BEGIN_SRC emacs-lisp

  (use-package sqlup-mode
    :ensure t
    )

  (use-package sql-indent
    :ensure t
    :pin gnu)

  (use-package php-mode
    :ensure t
    :config
    )

  (use-package phpunit
    :ensure t
    :config
    (setq phpunit-stop-on-error t)
    (setq phpunit-stop-on-failure t)
    (define-key php-mode-map (kbd "M-t t") 'phpunit-current-test)
    (define-key php-mode-map (kbd "M-t c") 'phpunit-current-class)
    (define-key php-mode-map (kbd "M-t p") 'phpunit-current-project)
    )

  (use-package ac-php
    :ensure t
    )

  (use-package company-php
    :ensure t
    )

  (add-hook 'php-mode-hook
            '(lambda ()
               (require 'company-php)
               (company-mode t)
               (ac-php-core-eldoc-setup) ;; enable eldoc
               (make-local-variable 'company-backends)
               (add-to-list 'company-backends 'company-ac-php-backend)))

  (use-package js2-mode
    :ensure t
    )

  (use-package web-mode
    :ensure t
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-script-padding 0)
    (setq web-mode-style-padding 0)
    (add-to-list 'web-mode-indentation-params '("lineup-calls" . nil))
    (add-to-list 'auto-mode-alist '("\\.blade.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))
    )
#+END_SRC

* Misc
#+BEGIN_SRC emacs-lisp
  (setq pcomplete-ignore-case t)

  (setq frame-title-format
        (list '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))


  (defun my--file-status-message ()
    ;; show file status in message area
    ;; TODO run this on a timer
    (message (buffer-file-name))
    )

  (setq make-backup-files nil)
  (setq auto-save-default nil)

  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq scroll-conservatively 10)

  (setq ring-bell-function 'ignore)

  (when window-system (global-hl-line-mode t))
  (when window-system (global-prettify-symbols-mode t))

  ;; 1l1l ({ {[ [{ 08B
  (set-default-font "Iosevka 16")
  ;; (set-default-font "Dina ttf 10px 17")
  ;; (set-default-font "Terminus 17")

  (tool-bar-mode -1)
  (tooltip-mode nil)
  (setq show-help-function nil)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)
  (setq vc-follow-symlinks t)
#+END_SRC
