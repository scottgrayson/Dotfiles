* Terminal
** use eshell with super RET
#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<s-return>") 'eshell)
#+END_SRC
* Org
** Org Src
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
  (setq org-src-fontify-natively t)
  (setq org-startup-indented t)
#+END_SRC
** Org Bullets
#+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

** Org Snippets
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
* Vim
#+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t
      :config
      '(evil-search-module (quote evil-search))

      (use-package evil-surround
        :ensure t
        :config
        (global-evil-surround-mode))

      (use-package evil-indent-textobject
        :ensure t)

      (evil-mode 1))

    (use-package general
      :ensure t
      :init

      (general-define-key
       :keymaps 'visual
       "#" 'comment-line)

      (defun evil-nohl ()
        (interactive)
        (evil-ex-nohighlight))

      (general-define-key
       :keymaps 'normal
       "C-f" 'evil-forward-char
       "C-b" 'evil-backward-char
       "C-p" 'evil-previous-line
       "C-n" 'evil-next-line
       "RET" 'evil-nohl
       "SPC" 'switch-to-previous-buffer
       "#" 'comment-line
       "s" 'avy-goto-word-1)

      (setq my-leader1 ",")
      (general-define-key
       :prefix my-leader1
       :keymaps 'normal
       "b"  'ivy-switch-buffer
       "c"  'comment-line
       "f"  'projectile-find-file
       "r"  'replace-regexp
       "w"  'save-buffer
       "p" 'switch-to-previous-buffer
       "="  'indent-buffer
       "s"  'counsel-git-grep))
#+END_SRC

* Git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init
    (progn
      (bind-key "C-x g" 'magit-status)
      ))

  (use-package evil-magit
    :after magit
    :ensure t
    )

  (use-package magithub
    :after magit
    :ensure t
    :config (magithub-feature-autoinject t))

  (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode +1))
#+END_SRC

* Filtering
Filtering for searches, commands, history, etc
** Ivy/Counsel/Swiper
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    )

  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq enable-recursive-minibuffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "M-y") 'counsel-yank-pop)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "C-c s") 'counsel-git-grep)
      (global-set-key (kbd "C-c S") 'counsel-ag)
      (global-set-key (kbd "C-c p") 'counsel-yank-pop)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
    )

  (setq ivy-extra-directories nil)

  (defun eh-ivy-open-current-typed-path ()
    (interactive)
    (when ivy--directory
      (let* ((dir ivy--directory)
             (text-typed ivy-text)
             (path (concat dir text-typed)))
        (delete-minibuffer-contents)
        (ivy--done path))))

  (define-key ivy-minibuffer-map (kbd "<return>") 'ivy-alt-done)
  (define-key ivy-minibuffer-map (kbd "C-f") 'eh-ivy-open-current-typed-path)
#+END_SRC

* Project Management
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy)
    (global-set-key (kbd "C-c f") 'projectile-find-file)

    (defun projectile-term ()
      "Create an ansi-term at the project root"
      (interactive)
      (let ((root (projectile-project-root))
            (buff-name (concat " [term] " (projectile-project-root))))
        (if (get-buffer buff-name)
            (switch-to-buffer-other-window buff-name)
          (progn
            (split-window-sensibly (selected-window))
            (other-window 1)
            (setq default-directory root)
            (eshell (getenv "SHELL"))
            (rename-buffer buff-name t)))))

    (global-set-key (kbd "C-x M-t") 'projectile-term))
#+END_SRC

* Autocomplete
** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
      (setq company-dabbrev-downcase 0)
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 2)
    :init
      (add-hook 'after-init-hook 'global-company-mode))

  (with-eval-after-load 'company
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "C-n") #'company-select-next)
      (define-key company-active-map (kbd "C-p") #'company-select-previous))
#+END_SRC
* Themes
  #+BEGIN_SRC emacs-lisp
    ;; (use-package solarized-theme
    ;;   :ensure t
    ;;   )

    ;; (use-package leuven-theme
    ;;   :ensure t
    ;;   )

    ;; (use-package spacemacs-theme
    ;;   :ensure t
    ;;   )

    ;; (use-package gruvbox-theme
    ;;   :ensure t
    ;;   )

    (use-package zenburn-theme
      :ensure t
      )

    (load-theme 'zenburn t)
  #+END_SRC
* Modeline
** Spaceline
  #+BEGIN_SRC emacs-lisp
    (use-package spaceline
      :ensure t
      :config
      (require 'spaceline-config)
      (setq powerline-default-separator (quote bar))
      (spaceline-highlight-face-evil-state)
      (spaceline-spacemacs-theme))
  #+END_SRC
** Diminish
#+BEGIN_SRC emacs-lisp
    (use-package diminish
      :ensure t
      :init
      (diminish 'beacon-mode)
      (diminish 'company-mode)
      (diminish 'undo-tree-mode)
      (diminish 'which-key-mode)
      (diminish 'rainbow-mode)
      (diminish 'rainbow-delimiters-mode)
      (diminish 'linum-relative-mode)
      (diminish 'ivy-mode))
#+END_SRC

* Windows
#+BEGIN_SRC emacs-lisp
  (setq split-height-threshold nil)
  (setq split-width-threshold 100)
#+END_SRC
* Other Packages
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :config
    (setq symon-sparkline-type (quote plain))
    (symon-mode))

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)
                            (projects . 5))))

  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

  (use-package sudo-edit
    :ensure t
    )

  (use-package which-key
    :ensure t
    :init
    (which-key-mode))

  (use-package rainbow-mode
    :ensure t
    :init
    (rainbow-mode 1))

  (use-package linum-relative
    :ensure t
    :config
    (setq linum-relative-current-symbol "")
    (linum-relative-mode))

  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
* Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :config
    (setq avy-keys '(
                    ?t ?n ?s ?e ?r ?i ?o ?a ?p ?l ?f ?u ?c ?, ?v ?d ?h ?y ?w ?. ?x ?' ?; ?q ?j ?g ?/ 
                    ))
    :bind
    ("M-s" . avy-goto-word-1))
#+END_SRC

* Custom Keymaps
  #+BEGIN_SRC emacs-lisp

  #+END_SRC

* Custom Functions
#+BEGIN_SRC emacs-lisp
  (defun switch-to-previous-buffer ()
    "Switch to previously open buffer.
  Repeated invocations toggle between the two most recently open buffers."
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))

  (defun indent-buffer ()
    "Indent the currently visited buffer."
    (interactive)
    (indent-region (point-min) (point-max)))

  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)

  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

* Languages
#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :ensure t
    :config
    (setq comment-use-syntax t)
    )

  (use-package web-mode
    :ensure t
    :config 
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (add-to-list 'auto-mode-alist '("\\.blade.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode)))
#+END_SRC
* Misc
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode)

  (setq make-backup-file nil)
  (setq auto-save-default nil)

  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq scroll-conservatively 10)

  (setq ring-bell-function 'ignore)

  (when window-system (global-hl-line-mode t))
  (when window-system (global-prettify-symbols-mode t))

  (set-default-font "Fira Code 18")

  (tool-bar-mode -1)
  (tooltip-mode nil)
  (setq show-help-function nil)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  (setq inhibit-startup-message t)

  (setq vc-follow-symlinks t)
#+END_SRC
